/*
  A module to import into flakes based on flake-parts.
  Makes integration into a flake easy and tidy.
  See https://flake.parts,
*/

{ lib
, flake-parts-lib
, ...
}:
let
  inherit (lib)
    mkOption
    types
    ;
in
{
  options = {
    perSystem = flake-parts-lib.mkPerSystemOption (
      { config
      , options
      , pkgs
      , ...
      }:
      let
        clib = import ../lib { inherit lib; };
        defaultSettingsLocations = {
          gemini-cli = ".gemini/settings.json";
          claude-code = ".claude/settings.json";
          opencode = "opencode.json";
          zed = ".zed/settings.json";
          cursor = ".cursor/mcp.json";
        };
        defaultRulesLocations = {
          gemini-cli = "GEMINI.md";
          claude-code = "CLAUDE.md";
          opencode = "AGENT.md";
          zed = "AGENT.md";
          cursor = "AGENT.md";
        };
      in
      {
        options = {
          mcpix = {
            settings = mkOption {
              type = types.submodule {
                options = {
                  rules = clib.types.rules;
                  servers = clib.types.servers;

                  targets = lib.mkOption {
                    type = types.submodule {
                      options = clib.types.flakePartsTargetOptions;
                    };
                    default = { };
                    description = "Configuration per target";
                  };
                };
              };
              default = { };
              description = ''
                The mcpix configuration.
              '';
            };
            devShell = mkOption {
              type = types.package;
              description = "A development shell that sets up files generated by mcpix.";
              readOnly = true;
            };
            rulesFile = mkOption {
              type = lib.types.nullOr lib.types.package;
              default = null;
              description = "The rules file derivation";
            };
          };
        };
        imports = [
          ./clients
          ./script.nix
          ./rules.nix
        ];

        # Set defaults
        config = {
          mcpix.settings.targets = lib.mapAttrs
            (name: settingsPath: {
              mcpSettingsLocation = lib.mkDefault settingsPath;
              rulesLocation = lib.mkDefault defaultRulesLocations.${name};
            })
            defaultSettingsLocations;
        };
      }
    );
  };
}
