/*
  A module to import into flakes based on flake-parts.
  Makes integration into a flake easy and tidy.
  See https://flake.parts,
*/

{ lib
, self
, flake-parts-lib
, ...
}:
let
  inherit (lib)
    mkOption
    types
    ;
in
{
  options = {
    perSystem = flake-parts-lib.mkPerSystemOption (
      { config
      , options
      , pkgs
      , ...
      }:
      let
        cfg = config.mcpix;
      in
      {
        options = {
          mcpix = {
            pkgs = mkOption {
              type = types.uniq (types.lazyAttrsOf (types.raw or types.unspecified));
              description = ''
                Nixpkgs to use in the mcpix.
              '';
              default = pkgs;
              defaultText = lib.literalMD "`pkgs` (module argument)";
            };
            settings = mkOption {
              type = types.submoduleWith {
                modules = [
                  (
                    { lib
                    , ...
                    }:
                    let
                      clib = import ../../lib { inherit lib; };
                    in
                    {
                      options = {
                        rules = clib.types.rules;
                        servers = clib.types.servers;
                        targets = mkOption {
                          type = clib.types.flakePartsTargetOptions;
                          description = "Configuration per target";
                        };
                      };
                    }
                  )
                ];
              };
              default = { };
              description = ''
                The mcpix configuration.
              '';
            };
            installationScript = mkOption {
              type = types.str;
              description = "A bash fragment that sets up mcpix.";
              readOnly = true;
            };
            devShell = mkOption {
              type = types.package;
              description = "A development shell that sets up files generated by mcpix.";
              readOnly = true;
            };
          };
        };
        config = {
          mcpix.installationScript = ""; # TODO: implement
          mcpix.settings = { pkgs, ... }: { };
          mcpix.devShell = pkgs.mkShell {
            shellHook = cfg.installationScript;
          };
        };
      }
    );
  };
}
